// <auto-generated />
using System;
using DataLayer.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data_Layer.Migrations
{
    [DbContext(typeof(BookDomainDbContext))]
    [Migration("20231124052612_book_schama_change")]
    partial class book_schama_change
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DataLayer.Entity.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOnDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("Currently_Borrowed_By_User_Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Is_Book_Available")
                        .HasColumnType("bit");

                    b.Property<int?>("Lent_By_User_id")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("ModifiedOnDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Currently_Borrowed_By_User_Id");

                    b.HasIndex("Lent_By_User_id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Books");
                });

            modelBuilder.Entity("DataLayer.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTimeOffset>("CreatedOnDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("ModifiedOnDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Tokens_Available")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOnDate = new DateTimeOffset(new DateTime(2023, 11, 24, 5, 26, 12, 209, DateTimeKind.Unspecified).AddTicks(8792), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            ModifiedOnDate = new DateTimeOffset(new DateTime(2023, 11, 24, 5, 26, 12, 209, DateTimeKind.Unspecified).AddTicks(8793), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Userone",
                            Password = "VXNlckAxMjMjc2VjcmV0QHBhc3N3b3JkITFoYXNoaW5nX2tleSQ=",
                            Tokens_Available = 1,
                            Username = "User1"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOnDate = new DateTimeOffset(new DateTime(2023, 11, 24, 5, 26, 12, 209, DateTimeKind.Unspecified).AddTicks(8799), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            ModifiedOnDate = new DateTimeOffset(new DateTime(2023, 11, 24, 5, 26, 12, 209, DateTimeKind.Unspecified).AddTicks(8799), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Usertwo",
                            Password = "VXNlckAxMjMjc2VjcmV0QHBhc3N3b3JkITFoYXNoaW5nX2tleSQ=",
                            Tokens_Available = 1,
                            Username = "User2"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOnDate = new DateTimeOffset(new DateTime(2023, 11, 24, 5, 26, 12, 209, DateTimeKind.Unspecified).AddTicks(8804), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            ModifiedOnDate = new DateTimeOffset(new DateTime(2023, 11, 24, 5, 26, 12, 209, DateTimeKind.Unspecified).AddTicks(8804), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Userthree",
                            Password = "VXNlckAxMjMjc2VjcmV0QHBhc3N3b3JkITFoYXNoaW5nX2tleSQ=",
                            Tokens_Available = 1,
                            Username = "User3"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOnDate = new DateTimeOffset(new DateTime(2023, 11, 24, 5, 26, 12, 209, DateTimeKind.Unspecified).AddTicks(8809), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            ModifiedOnDate = new DateTimeOffset(new DateTime(2023, 11, 24, 5, 26, 12, 209, DateTimeKind.Unspecified).AddTicks(8809), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Userfour",
                            Password = "VXNlckAxMjMjc2VjcmV0QHBhc3N3b3JkITFoYXNoaW5nX2tleSQ=",
                            Tokens_Available = 1,
                            Username = "User4"
                        });
                });

            modelBuilder.Entity("DataLayer.Entity.Book", b =>
                {
                    b.HasOne("DataLayer.Entity.User", "CurrentBorrowedByUser")
                        .WithMany("Books_Borrowed")
                        .HasForeignKey("Currently_Borrowed_By_User_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataLayer.Entity.User", "LentByUser")
                        .WithMany("Books_Lent")
                        .HasForeignKey("Lent_By_User_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CurrentBorrowedByUser");

                    b.Navigation("LentByUser");
                });

            modelBuilder.Entity("DataLayer.Entity.User", b =>
                {
                    b.Navigation("Books_Borrowed");

                    b.Navigation("Books_Lent");
                });
#pragma warning restore 612, 618
        }
    }
}
